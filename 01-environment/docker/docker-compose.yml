#
# Docker Compose with the following services:
#  Redis
#  MongoDB 
#  Cassandra
#  Solr
#  Elasticsearch
#  Neo4J
#  Zeppelin

version: '3.3'
services:

  ## Redis Stack

  redis:
    container_name: redis
    hostname: redis
    image: redis
    ports:
      - 6379:6379
    restart: always

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "38083:8081"
    restart: always

  ## Dastastax Cassandra

#  dse-1:
#    image: datastax/dse-server
#    container_name: cassandra-1
#    ports: 
#      - "9042:9042"
#    environment:
#      DS_LICENSE: accept
#    # Allow DSE to lock memory with mlock
#    cap_add:
#    - IPC_LOCK
#    ulimits:
#      memlock: -1
#    restart: always
#  
#  dse-studio:
#    image: datastax/dse-studio
#    container_name: dse-studio
#    environment:
#      DS_LICENSE: accept
#    ports:
#      - "9091:9091"
#    restart: always
    
  ## Cassandra

  cassandra-1:
    image: cassandra
    container_name: cassandra-1
    ports: 
      - 9042:9042
      - 7199:7199
      - 9160:9160      
    environment:
      - CASSANDRA_SEEDS=cassandra-1
      - CASSANDRA_CLUSTER_NAME="Test Cluster"
      - CASSANDRA_DC=se1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch    
    restart: always

  cassandra-web:
    image: trivadis/cassandra-web
    container_name: cassandra-web
    ports:
      - "3000:3000"
    environment:
      - CASSANDRA_HOSTNAME=cassandra-1
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    restart: always

  ## MongoDB

  mongodb:
    image: mongo:4
    container_name: mongodb
    ports: 
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=sample   
      - MONGO_INITDB_USERNAME=admin
      - MONGO_INITDB_PASSWORD=admin 
#    volumes:
      # seeding scripts
      #- ./conf/mongo-entrypoint:/docker-entrypoint-initdb.d 
    restart: always
    
  mongo-express:
    image: mongo-express  
    container_name: mongo-express
    ports: 
      - 38082:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb   
    restart: always

  admin-mongo:
    image: adicom/admin-mongo  
    container_name: admin-mongo
    ports: 
      - 1234:1234
    restart: always

  ## HBase

  hbase:
    image: harisekhon/hbase:latest
    container_name: hbase
    ports:
      - 8080:8080
      - 8085:8085
      - 9090:9090
      - 9095:9095
      - 16000:16000
      - 16010:16010
      - 16201:16201
      - 16030:16030
      - 16301:16301


  ## SOLR

  solr:
    image: solr
    container_name: solr
    ports:
      - "8983:8983"
    restart: always
  
  ## Elasticsearch

  ## sudo sysctl -w vm.max_map_count=262144   
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      xpack.security.enabled: "false"
      XPACK_SECURITY_ENABLED: "false"
      xpack.monitoring.enabled: "false"
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:6.7.0
    hostname: kibana
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      xpack.security.enabled: "false"
      XPACK_SECURITY_ENABLED: "false"
      xpack.monitoring.enabled: "false"
      discovery.type: "single-node"
      elasticsearch.url: http://elasticsearch:9200
      server.host: "0.0.0.0"
      SERVER_HOST: "0.0.0.0"
      server.name: "kibana"
      SERVER_NAME: "kibana"
      XPACK_GRAPH_ENABLED: "false"
      XPACK_MONITORING_ENABLED: "false"
      XPACK_REPORTING_ENABLED: "false"
      XPACK_SECURITY_ENABLED: "false"
    command: [ "/bin/bash", "-c", "/usr/share/kibana/bin/kibana-plugin remove x-pack; /usr/local/bin/kibana-docker" ]
    restart: always
    
  dejavu:
    image: appbaseio/dejavu
    hostname: dejuvu
    container_name: dejavu
    ports:
      - "1358:1358"
    restart: always

  cerebro:
    image: lmenezes/cerebro
    hostname: cerebro
    container_name: cerebro
    ports:
      - "39000:9000"    
    restart: always

  ## Neo4J

  neo4j:
    image: neo4j:latest
    hostname: neo4j
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_shell_enabled=true
    restart: always

  ## Influxdb

#  influxdb:
#    image: influxdb
#    hostname: influxdb
#    container_name: influxdb
#    ports:
#      - "8083:8083"
#      - "8086:8086"
#      - "8090:8090"
#    environment:
#      - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
#      - INFLUXDB_HTTP_AUTH_ENABLED=true
#      - INFLUXDB_HTTP_LOG_ENABLED=false
#    restart: always
#
#  chronograf:
#    image: chronograf:latest
#    hostname: chronograf
#    container_name: chronograf
#    ports:
#      - "8888:8888"
#    links:
#      - influxdb

  ## Grafana

  grafana:
    image: grafana/grafana
    hostname: grafana
    container_name: grafana
    ports:
      - "3010:3000"
    restart: always

  ## Notebook
    
  zeppelin:
    image: apache/zeppelin:0.8.1
    hostname: zeppelin
    container_name: zeppelin
    ports:
      - "38081:8080"    
    restart: always

  jupyter:
    image: jupyter/datascience-notebook:latest
    hostname: jupyter
    container_name: jupyter
    ports: 
      - "10000:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
    restart: always

 